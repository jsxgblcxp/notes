1.得到命令执行结果
        os.popen(“cmd”).read()
2.dic
        空 dict {}
for ( k , v  ) in {}.items():
     pass
3.send mail 安装
        yum -y update sendmail sendmail-cf
        service sendmail start
        似乎安装上这两个就可以了等下再试试
4.iptables转发配置
        sudo iptables -t nat -A OUTPUT  -p tcp --dport 80 -j REDIRECT --to-ports 8080
        sudo iptables -t nat -A PREROUTING  -p tcp --dport 80 -j REDIRECT --to-ports 8080
5. python socket设置请求超时
        socket.setdefaulttimeout( double)
5.ssh key make
        ssh-keygen -t rsa
6.判断文件是否存在
        os.path.isfile('d:/assist')
7.fork
import os, sys

print "I'm going to fork now - the child will write something to a pipe, and the parent will read it back"

r, w = os.pipe()           # r,w是文件描述符, 不是文件对象

pid = os.fork()
if pid:
    # 父进程
    os.close(w)           # 关闭一个文件描述符
    r = os.fdopen(r)      # 将r转化为文件对象
    print "parent: reading"
    txt = r.read()
    os.waitpid(pid, 0)   # 确保子进程被撤销
else:
    # 子进程             
    os.close(r)
    w = os.fdopen(w, 'w')
    print "child: writing"
    w.write("here's some text from the child")
    w.close()
    print "child: closing"
    sys.exit(0)

print "parent: got it; text =", txt

8.
import MySQLdb
def run_sql_cmd( mysql_cmd ,  host , user , pwd , db , port = 3306 ):                     
        try:                                                                              
                conn=MySQLdb.connect( host = host ,                                       
                                      user = user ,                                       
                                      passwd = pwd ,                                      
                                      db = db ,                                           
                                      port = port )                                       
                cur=conn.cursor()                                                         
                print( mysql_cmd )                                                        
                res = cur.execute( mysql_cmd )                                            
                check_result = cur.fetchmany( res )                                       
                cur.close()                                                               
                conn.close()                                                              
                return check_result                                                       
        except MySQLdb.Error,e:                                                           
                print( e )                                                                
                print( "nothing here" )                                                   
                return []                                                                 

9.set
x = set('spam') set of a workd
y = set(['h','a','m'])  set of a list
x & y # 交集 x.intsersection( y )
x | y # 并集 x.union( y )
x - y # 差集 x.difference( t )
x ^ y # 对称差集（项在t或s中，但不会同时出现在二者中） x.symmetric_difference( t )
t.add('x')            # 添加一项
s.update([10,37,42])  # 在s中添加多项
t.remove('H') #remove one from set
x in s
x not in s 
x <=t     x.issubset( t )
x >=t     x.issuerset( t )
s.copy() 浅复制

10.time
        datetime.date.fromtimestamp( 33 ).strftime( "%Y-%M-%d" )

11.从其他文件夹引用文件的时候那个文件夹必须有一个__init__.py 或者
   添加库的搜索路径 sys.path.append(os.getcwd())

12.random
        random.random() 生成一个0到1的随机符点数: 0 <= n < 1.0
        random.uniform(a, b)，生成一个指定范围内的随机符点数 如果a > b，则生成的随机数n: a <= n <= b。如果 a <b， 则 b <= n <= a。
        random.randint(a, b)，生成一个指定范围内的整数
        random.choice从序列中获取一个随机元素
                print random.choice("学习Python")   
                print random.choice(["JGood", "is", "a", "handsome", "boy"])  
                print random.choice(("Tuple", "List", "Dict"))  
        random.shuffle的函数原型为：random.shuffle(x[, random]) 将一个列表中的元素打乱
        random.sample的函数原型为：random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列
13.python2 sock.setdefaultimeout(）是全局的会影响到对stdin的读入

14.execfile( "config.py" ) 执行并且导入一个py文件

15.
 if "__main__" == __name__ :
        do it

16.sys.argv 得到被调用的参数

17.  sys.stderr.write( "lala" )
     print >>sys.stderr , "what you wish to output"


18.
from multiprocessing import Pool
from time import sleep
import os  

def doubler(number):
        for i in range( number ):
                print  number , i , os.getpid()
                sleep( 1 ) 
        return number * 2 

if __name__ == '__main__':
    numbers = [1, 3, 10] 
    #numbers = [5]
    pool = Pool(processes=3)
    print(pool.map(doubler, numbers))
19. "%r" % xx , 
        this could format everything
20.Escaping
"I am 6'2\" tall."  # escape double-quote inside string
'I am 6\'2" tall.'  # escape single-quote inside string

21.
        ret = raw_input( "what to show on the screen" )
        get input from keyboard

22.
file_fd.trucate()

23.
print """
--------begin of what to write ------
lalalala
--------end of what to write ------
"""

24.
def foo( * args ):
        a ,b ,c = args
        ...
                do something here
        ...

25.
"st1rin1g".split( "another string" )

26.
print sorted( [ "b", "a" , "c" ] ) 

[ "a", "b" , "c" ]

27.
if 1 == 1  :
elif 1 == 2 :
else:

28
[1 , 2].append( 1 )
---> [1 , 2 , 3]

def foo( var ):
        print var

def foo2():
        print 123
        
another_dict = {  "1" : foo , "2" : foo( 123 ) , "3" : foo2  , "4" : foo2()   }

another_dict[ "1" ]( 123 ) #call foo( 123 )
another_dict[ "2" ]        #call foo( 123 )
another_dict[ "3" ]()      #call foo2()
another_dict[ "4" ]        #call foo2()

29. python class define

class MyStuff(object):
    def __init__(self):
        self.tangerine = "And now a thousand years between"
    def apple(self):
        print "I AM CLASSY APPLES!"

a_var_of_class = MyStuff()

-------------------
class Person(object):

    def __init__(self, name):
        self.name = name
        self.pet = None
class Employee(Person):

    def __init__(self, name, salary):
        super(Employee, self).__init__(name) # call the super init of this class
                                             # this is also the way to call the upper user
        self.salary = salary
-------------------

30. The words of class
____________________________________________________________________________________________________________________________________
Words for Class:
________________________|___________________________________________________________________________________________________________
class                   |Tell Python to make a new type of thing.
object                  |Two meanings: the most basic type of thing, and any instance of some thing.
instance                |What you get when you tell Python to create a class.
def                     |How you define a function inside a class.
self                    |Inside the functions in a class, self is a variable for the instance/object being accessed.
inheritance             |The concept that one class can inherit traits from another class, much like you and your parents.
composition             |The concept that a class can be composed of other classes as parts, much like how a car has wheels.
attribute               |A property classes have that are from composition and are usually variables.
is-a                    |A phrase to say that something inherits from another, as in a "salmon" is-a "fish."
has-a                   |A phrase to say that something is composed of other things or has a trait, as in "a salmon has-a mouth."

____________________________________________________________________________________________________________________________________
Examples
________________________________________________|___________________________________________________________________________________
class X(Y)                                      |"Make a class named X that is-a Y."
class X(object): def __init__(self, J)          |"class X has-a __init__ that takes self and J parameters."
class X(object): def M(self, J)                 |"class X has-a function named M that takes self and J parameters."
foo = X()                                       |"Set foo to an instance of class X."
foo.M(J)                                        |"From foo get the M function, and call it with parameters self, J."
foo.K = Q                                       |"From foo get the K attribute and set it to Q."

31. for * args and **kargs
def say3( a,b,c ):
        print a , b , c
dic2 = [ 1,2,3 ]
say3( *dic2 )
-------------------
def say2( **args ):                        
        for k , v in args.items():
                print k , v
say2( a = "12313",  b = 13321 , c = say2 )
-------------------
def say2( **args ):
        print args
dic_tmp = {1:3 , 2:"java" , 4:"qq"}


32.when hard to import somehting
        export PYTHONPATH=.
33. try and except
def convert_number(s):
    try:
        return int(s)
    except ValueError:
        return None

34.assert
assert True , "the mesasge which will not be shown"
assert False , "the mesasge which will be shown"

============================ check sheet ============================ 


____________________________________________________________________________________________________________________________________
Keyword                             |Description                                                         |Example
____________________________________|____________________________________________________________________|__________________________
and                                 |Logical and.                                                        |True and False == False
as                                  |Part of the with-as statement.                                      |with X as Y: pass
assert                              |Assert (ensure) that something is true.                             |assert False, "Error!"
break                               |Stop this loop right now.                                           |while True: break
class                               |Define a class.                                                     |class Person(object)
continue                            |Don't process more of the loop, do it again.                        |while True: continue
def                                 |Define a function.                                                  |def X(): pass
del                                 |Delete from dictionary.                                             |del X[Y]
elif                                |Else if condition.                                                  |if: X; elif: Y; else: J
else                                |Else condition.                                                     |if: X; elif: Y; else: J
except                              |If an exception happens, do this.                                   |except ValueError, e: print e
exec                                |Run a string as Python.                                             |exec 'print "hello"'
finally                             |Exceptions or not, finally do this no matter what.                  |finally: pass
for                                 |Loop over a collection of things.                                   |for X in Y: pass
from                                |Importing specific parts of a module.                               |from x import Y
global                              |Declare that you want a global variable.                            |global X
if                                  |If condition.                                                       |if: X; elif: Y; else: J
import                              |Import a module into this one to use.                               |import os
in                                  |Part of for-loops. Also a test of X in Y.                           |for X in Y: pass also 1 in [1] == True
is                                  |Like == to test equality.                                           |1 is 1 == True
lambda                              |Create a short anonymous function.                                  |s = lambda y: y ** y; s(3)
not                                 |Logical not.                                                        |not True == False
or                                  |Logical or.                                                         |True or False == True
pass                                |This block is empty.                                                |def empty(): pass
print                               |Print this string.                                                  |print 'this string'
raise                               |Raise an exception when things go wrong.                            |raise ValueError("No")
return                              |Exit the function with a return value.                              |def X(): return Y
try                                 |Try this block, and if exception, go to except.                     |try: pass
while                               |While loop.                                                         |while X: pass
with                                |With an expression as a variable do.                                |with X as Y: pass
yield                               |Pause here and return to caller.                                    |def X(): yield Y; X().next()

____________________________________________________________________________________________________________________________________
Type                                |Description                                                         |Example
____________________________________|____________________________________________________________________|__________________________
True                                |True boolean value.                                                 |True or False == True
False                               |False boolean value.                                                |False and True == False
None                                |Represents "nothing" or "no value".                                 |x = None
strings                             |Stores textual information.                                         |x = "hello"
numbers                             |Stores integers.                                                    |i = 100
floats                              |Stores decimals.                                                    |i = 10.389
lists                               |Stores a list of things.                                            |j = [1,2,3,4]
dicts                               |Stores a key=value mapping of things.                               |e = {'x': 1, 'y': 2}

__________________________________________________
Escape                              |Description                                                         
____________________________________|_____________
\\                                  |Backslash                                                           
\'                                  |Single-quote                                                        
\"                                  |Double-quote                                                        
\a                                  |Bell                                                                
\b                                  |Backspace                                                           
\f                                  |Formfeed                                                            
\n                                  |Newline                                                             
\r                                  |Carriage                                                            
\t                                  |Tab                                                                 
\v                                  |Vertical tab                                                        
\uxxxx                              |Character with 16-bit hex value xxxx (u'' string only)
\Uxxxxxxxx                          |Character with 32-bit hex value xxxxxxxx (u'' string only)
\N{name}                            |Character named name in the Unicode database (Unicode only)
\v                                  |ASCII vertical tab (VT)
\ooo                                |Character with octal value ooo
\xhh                                |Character with hex value hh

____________________________________________________________________________________________________________________________________
Escape                              |Description                                                         |Example
____________________________________|____________________________________________________________________|__________________________
%d                                  |Decimal integers (not floating point).                              |"%d" % 45 == '45'
%i                                  |Same as %d.                                                         |"%i" % 45 == '45'
%o                                  |Octal number.                                                       |"%o" % 1000 == '1750'
%u                                  |Unsigned decimal.                                                   |"%u" % -1000 == '-1000'
%x                                  |Hexadecimal lowercase.                                              |"%x" % 1000 == '3e8'
%X                                  |Hexadecimal uppercase.                                              |"%X" % 1000 == '3E8'
%e                                  |Exponential notation, lowercase 'e'.                                |"%e" % 1000 == '1.000000e+03'
%E                                  |Exponential notation, uppercase 'E'.                                |"%E" % 1000 == '1.000000E+03'
%f                                  |Floating point real number.                                         |"%f" % 10.34 == '10.340000'
%F                                  |Same as %f.                                                         |"%F" % 10.34 == '10.340000'
%g                                  |Either %f or %e, whichever is shorter.                              |"%g" % 10.34 == '10.34'
%G                                  |Same as %g but uppercase.                                           |"%G" % 10.34 == '10.34'
%c                                  |Character format.                                                   |"%c" % 34 == '"'
%r                                  |Repr format (debugging format).                                     |"%r" % int == "<type 'int'>"
%s                                  |String format.                                                      |"%s there" % 'hi' == 'hi there'
%%                                  |A percent sign.                                                     |"%g%%" % 10.34 == '10.34%'

____________________________________________________________________________________________________________________________________
perator                             |Description                                                         |Example
____________________________________|____________________________________________________________________|__________________________
+                                   |Addition                                                            |2 + 4 == 6
-                                   |Subtraction                                                         |2 - 4 == -2
*                                   |Multiplication                                                      |2 * 4 == 8
**                                  |Power of                                                            |2 ** 4 == 16
/                                   |Division                                                            |2 / 4.0 == 0.5
//                                  |Floor division                                                      |2 // 4.0 == 0.0
%                                   |String interpolate or modulus                                       |2 % 4 == 2
<                                   |Less than                                                           |4 < 4 == False
>                                   |Greater than                                                        |4 > 4 == False
<=                                  |Less than equal                                                     |4 <= 4 == True
>=                                  |Greater than equal                                                  |4 >= 4 == True
Err:520                             |Equal                                                               |4 == 5 == False
!=                                  |Not equal                                                           |4 != 5 == True
<>                                  |Not equal                                                           |4 <> 5 == True
( )                                 |Parenthesis                                                         |len('hi') == 2
[ ]                                 |List brackets                                                       |[1,3,4]
{ }                                 |Dict curly braces                                                   |{'x': 5, 'y': 10}
@                                   |At (decorators)                                                     |@classmethod
,                                   |Comma                                                               |range(0, 10)
:                                   |Colon                                                               |def X():
0                                   |Dot                                                                 |self.x = 10
=                                   |Assign equal                                                        |x = 10
;                                   |semi-colon                                                          |print "hi"; print "there"
+=                                  |Add and assign                                                      |x = 1; x += 2
-=                                  |Subtract and assign                                                 |x = 1; x -= 2
*=                                  |Multiply and assign                                                 |x = 1; x *= 2
/=                                  |Divide and assign                                                   |x = 1; x /= 2
//=                                 |Floor divide and assign                                             |x = 1; x //= 2
%=                                  |Modulus assign                                                      |x = 1; x %= 2
**=                                 |Power assign                                                        |x = 1; x **= 2

